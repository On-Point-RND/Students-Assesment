SuperResolution
[name] [surname]
Introduction
SR with SRCNN
Project Workflow
â€¢ Literature review of SR methods
â€¢ Dataset preparation
â€¢ Model implementation &
training
â€¢ Quality evaluation (PSNR, SSIM)
â€¢ Flask web interface
â€¢ Docker deployment
SuperResolution methods - classical
â€¢ Interpolation â€¢ Filtering â€¢ Spatialâ€“
Frequency
â€¢ Converts to
â€¢ Fast, simple â€¢ Applies
frequency
pixel-based deblurring/restor
domain â†’
upscaling ation filte rs
restores
â€¢ Cannot create â€¢ Improves e dg es
high-frequency
new details â†’ slightly, but
components often blurry limited on
complex textures
SuperResolution methods - neural
â€¢ SRCNN â€¢ EDSR â€¢ ESRGAN
â€¢ feature extraction â†’ ne twork for SR for photorealism
nonlinear
â€¢ Superior
mapping â†’ accuracy, higher
â€¢ Exceptional
reconstruction computational
textures, risk of
lightweight & load
artifa cts,
fast
complex training
Architecture
â€¢ 128Ã—128 inputs
â€¢ 3 conv layers: 64Ã—9Ã—9 â†’ 32Ã—1Ã—1 â†’ 1Ã—5Ã—5
â€¢ 57K parameters, 0.08 GFLOPs/image
Dataset & Preprocessing
â€¢Dataset Composition
1,000 HR images: 800 Train /
200 Validation
Image size: 256Ã—256 px
â€¢Preprocessing Pipeline
Ce nter crop to square
256Ã—256
Resize to
Downscale Ã—2 to create LR
Normali ze pixel values to [0, 1]
Web interface
Tech Stack
Backend: Flask (REST API, Python
integra tion)
Frontend: HTML, CSS, JavaScript
PSNR metric
â€¢ Slide Content: Evaluation â€” PSNR
â€¢ Metric: PSNR (dB)
â€¢ Epoch 1: 3.03 dB
â€¢ Epoch 50: 41.40 dB
â€¢ Improvement: +36.37 dB
â€¢ Trend: Fast growt h â†’ plateau after
epoch 40
â€¢ Conclusion: Learned well, but
limited by model compl exity
Results
Thank you for your attention!
ðŸ”— GitHub: github.com/[compa ny]/[name]Resolution
Feel free to check out the code or test the project yourself.